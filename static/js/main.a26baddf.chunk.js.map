{"version":3,"sources":["components/layout/Navbar.js","components/pages/About.js","components/pages/Downloads.js","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","About","Downloads","Home","Jumbotron","fluid","Container","text-alighj","style","color","App","basename","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAEe,SAASA,IACpB,OACI,6BACI,yBAAKC,UAAU,+CACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,QACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACxJ,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,aACzC,wBAAIR,UAAU,cACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,cAA7B,aAAoD,0BAAMD,UAAU,WAAhB,eAExD,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,UAA7B,SAA4C,0BAAMD,UAAU,WAAhB,mBCdzD,SAASS,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,mD,oBCCO,SAASC,IACpB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAWC,eAAA,GACP,wBAAIC,MAAO,CAACC,MAAO,WAAnB,kCACA,wKAC0I,6BAD1I,8IAE2I,6BAF3I,iGAG8F,6BAH9F,qHAIkH,6BAJlH,iGCWLC,MAff,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKnB,UAAU,OACb,kBAACD,EAAD,MACA,kBAAC,IAAD,CAAOqB,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,yBAAKX,UAAU,qBACb,kBAAC,IAAD,CAAOoB,KAAK,aAAaC,OAAK,EAACC,UAAWZ,IAC1C,kBAAC,IAAD,CAAOU,KAAK,SAASC,OAAK,EAACC,UAAWb,QCH5Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a26baddf.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Navbar() {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <a className=\"navbar-brand\" href=\"/\">Home</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"/downloads\">Downloads <span className=\"sr-only\">(current)</span></a>\n                        </li>\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"/about\">About <span className=\"sr-only\">(current)</span></a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <div>\n            hmmmmmmm...\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Downloads() {\n    return (\n        <div>\n            Under Construction\n        </div>\n    )\n}\n","import React from 'react'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\n\n\nexport default function Home() {\n    return (\n        <div>\n            <Jumbotron fluid>\n                <Container text-alighj>\n                    <h1 style={{color: \"purple\"}}>Welcome to lavender-Evergarden</h1>\n                    <p>\n                    I have created this with a view to manage various notes and guides about the Redmi Note 7 to help people with stuffs are actually a noob. <br/>\n                    You might be feeeling very bad about this site since it might look very odd considering im not a very good website developer or a desginer.<br/>\n                    Im just a regular guy trying hard to make something out of nothing ! So, please be patient :) <br/>\n                    I'm sure you will be able to find what you wanna find in here . Most of the time id be posting links either way . <br/>\n                    Thank you so much ! if you have read this long paragraph :3 I just wrote it because idk .. \n                    </p>\n                </Container>\n            </Jumbotron>\n        </div>\n    )\n}\n","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport Navbar from './components/layout/Navbar'\nimport About from './components/pages/About'\nimport Downloads from './components/pages/Downloads'\nimport Home from './components/pages/Home'\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Navbar />\n        <Route path=\"/\" exact component={Home} />\n        <div className=\"container mx-auto\" >\n          <Route path=\"/downloads\" exact component={Downloads} />\n          <Route path=\"/about\" exact component={About} />\n        </div>\n      </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}